{"version":3,"sources":["views/apps/user/list/columns.js","views/apps/user/list/index.js","constants/api/zammadApi.js","constants/api/territoriesApi.js","@core/components/card-grid/index.js","services/zammad/user/index.js","services/strapi/users/index.js","redux/actions/territories/regions/index.js","redux/actions/zammad/users/index.js","redux/actions/territories/municipalities/index.js","redux/actions/zammad/rols/index.js","redux/actions/territories/provinces/index.js","services/strapi/beneficiaries/index.js"],"names":["columns","name","minWidth","selector","sortable","cell","row","userInfo","id","firstName","firstname","lastName","lastname","cedula","rowClient","email","phone","Badge","color","user_level","url","edit","Url","userEdit","rowActions","UsersList","dispatch","useDispatch","useState","userState","setUserState","console","log","userLoading","setUserLoading","valueSearch","setValueSearch","valueZone","setValueZone","pageNumber","setPageNumber","useEffect","strapiGetUsers","then","res","data","catch","sweetAlertError","finally","getAllRegionsActions","regionsSelector","useSelector","state","regions","provincesSelector","provinces","municipalitiesSelector","municipalities","defaultValueState","value","label","regionState","setRegionState","provinciaState","setProvinciaState","municipioState","setMunicipioState","cardHeaderTitle","Row","Col","md","Label","theme","selectThemeColors","isClearable","className","classNamePrefix","isLoading","options","optionsCodeValueSelectNoData","onChange","e","getProvincesByRegionActions","handleChangeRegions","noOptionsMessage","inputValue","noOptionsMessageSelect","territoriesLabel","selectNoRegionsFound","getMunicipalitiesByprovincesByRegionsActions","handleChangeProvinces","selectNoProvincesFound","handleChangeMunicipalities","selectNoMunicipalitiesFound","columnsTable","dataTable","showButtonAddUser","loadingTable","zammadApi","tickets","ticketById","allTickets","ticketsByDate","ticketsByState","ticketsByGroup","ticketPriorities","ticketStates","postTags","tagsByName","postTicketTags","ticketTags","ticketArticles","postTicketArticles","ticketArticlesAttachment","users","userMe","userById","userByCedula","allUsers","allRols","organizations","organizationsByAcronym","acronym","groups","territoriesApi","regionByIdentifier","provinceByIdentifier","municipalityByIdentifier","districtByIdentifier","sectionByIdentifier","neighborhoodByIdentifier","subNeighborhoodByIdentifier","provincesByRegion","municipalitiesByprovincesByRegions","idRegions","idProvinces","districtByIdProvinceByIdMunicipality","idMunicipality","sectionByIdMunicipalityByIdDistrict","idDistrict","neighborhoodByIdDistrictByIdSection","idSection","subNeighborhoodByIdSectionByIdNeighborhood","idNeighborhood","CardGrid","cardHeaderComponent","children","tag","postUser","dataObj","a","zammadAxios","post","putUser","put","getUserMe","get","getUserByCedula","strapiGetUserMe","strapiAxios","strapiApi","user","strapiGetUserById","userId","strapiPutUser","userPost","strapiPostUsers","strapiImportUsers","userImport","territoriesAxios","response","type","territoriesTypes","GET_REGIONS","payload","GET_MUNICIPALITIES_BY_PROVINCES_BY_REGIONS","cleanSelectMunicipalities","CLEAN_SELECT_MUNICIPALITIES","GET_PROVINCES_BY_REGION","cleanSelectProvinces","CLEAN_SELECT_PROVINCES","strapiGetBeneficiaries","beneficiaries","beneficiary","strapiPostBeneficiary","beneficiaryPost","strapiPutBeneficiary","beneficiaryId","strapiGetBeneficiariesByCedula","beneficiaryByCedula"],"mappings":"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","file":"static/js/105.062299f7.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { Badge } from 'reactstrap'\r\nimport {\r\n  rowClient,\r\n  rowActions,\r\n} from '../../../../@core/components/table/commonColumns'\r\nimport Url from '../../../../constants/Url'\r\n\r\nexport const getRol = (rol, index) => (\r\n  <span key={index} style={{ marginRight: '5px' }}>\r\n    <Badge color=\"light-primary\">{rol}</Badge>\r\n  </span>\r\n)\r\n\r\n// export const getProvinces = (id) => {\r\n//   const provincesSelector = useSelector(\r\n//     (state) => state?.provinces?.allProvinces,\r\n//   )\r\n//   const validatedId = id || ''\r\n\r\n//   return provincesSelector.find(\r\n//     (obj) => obj.identifier.substr(2, 2) === validatedId.substr(2, 2),\r\n//   )?.name\r\n// }\r\n\r\n// export const getMunicipality = (id) => {\r\n//   const municipalitiesSelector = useSelector(\r\n//     (state) => state?.municipalities?.allMunicipalities,\r\n//   )\r\n//   const validatedId = id || ''\r\n\r\n//   return municipalitiesSelector.find(\r\n//     (obj) => obj.identifier === validatedId.substr(0, 6),\r\n//   )?.name\r\n// }\r\n\r\nexport const columns = [\r\n  {\r\n    name: 'Nombre',\r\n    minWidth: '400px',\r\n    selector: 'firstname',\r\n    sortable: true,\r\n    cell: (row) => {\r\n      const userInfo = {\r\n        id: row.id,\r\n        firstName: row.firstname,\r\n        lastName: row.lastname,\r\n        cedula: row.cedula,\r\n      }\r\n\r\n      return rowClient(userInfo)\r\n    },\r\n  },\r\n  {\r\n    name: 'Correo',\r\n    minWidth: '260px',\r\n    selector: 'email',\r\n    sortable: true,\r\n    cell: (row) => row.email,\r\n  },\r\n  {\r\n    name: 'Teléfono',\r\n    minWidth: '160px',\r\n    selector: 'phone',\r\n    sortable: true,\r\n    cell: (row) => row.phone,\r\n  },\r\n  {\r\n    name: 'Rol',\r\n    minWidth: '172px',\r\n    selector: 'roles',\r\n    sortable: true,\r\n    // cell: (row) => {\r\n    //   const newRols = [...new Set(row.roles)]\r\n    //   return newRols.map((rol, index) => getRol(rol, index))\r\n    // }\r\n    cell: (row) => <Badge color=\"light-primary\">{row.user_level}</Badge> \r\n  },\r\n  {\r\n    name: 'Acciones',\r\n    minWidth: '50px',\r\n    cell: (row) => {\r\n      const url = {\r\n        edit: Url.userEdit,\r\n      }\r\n      return rowActions(row.id, url)\r\n    },\r\n  },\r\n]\r\n","// ** React Imports\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n// ** Columns\r\n\r\n// ** Third Party Components\r\nimport Select from 'react-select'\r\nimport { selectThemeColors } from '@utils'\r\nimport { Row, Col, Label } from 'reactstrap'\r\nimport { columns } from './columns'\r\n\r\n// import DataTableList from '../../../../@core/components/table'\r\nimport DataTableList from '../../bandeja/list/table'\r\nimport CardGrid from '../../../../@core/components/card-grid'\r\nimport ComponentSpinner from '../../../../@core/components/spinner/Loading-spinner'\r\nimport { getAllUsersActions } from '../../../../redux/actions/zammad/users'\r\nimport { getAllRolsActions } from '../../../../redux/actions/zammad/rols'\r\nimport { getAllProvincesActions, getProvincesByRegionActions } from '../../../../redux/actions/territories/provinces'\r\nimport { getAllMunicipalitiesActions, getMunicipalitiesByprovincesByRegionsActions } from '../../../../redux/actions/territories/municipalities'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\r\nimport {\r\n  optionsIdValueSelectNoData,\r\n  optionsCodeValueSelectNoData,\r\n} from '../../../../utility/Utils'\r\nimport { getAllUsers } from '../../../../services/zammad/user'\r\nimport { sweetAlertError } from '../../../../@core/components/sweetAlert'\r\nimport { strapiGetBeneficiaries } from '../../../../services/strapi/beneficiaries'\r\nimport { strapiGetUsers } from '../../../../services/strapi/users'\r\nimport { getAllRegionsActions } from '../../../../redux/actions/territories/regions'\r\n\r\nconst UsersList = function() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [ userState, setUserState ] = useState([])\r\n  console.log(userState)\r\n  const [ userLoading, setUserLoading ] = useState(true)\r\n  const [valueSearch, setValueSearch] = useState(\"\")\r\n  const [valueZone, setValueZone] = useState(\"\")\r\n  const [ pageNumber, setPageNumber ] = useState(1)\r\n\r\n  console.log(valueZone)\r\n\r\n  useEffect(() => {\r\n    // dispatch(getAllUsersActions())\r\n    // getAllUsers()\r\n    //   .then(res => setUserState(res.data))\r\n    //   .catch(err => {\r\n    //     sweetAlertError()\r\n    //   })\r\n    //   .finally(() => setUserLoading(false))\r\n    // dispatch(getAllRolsActions())\r\n    // dispatch(getAllProvincesActions())\r\n\r\n    strapiGetUsers({valueSearch, valueZone, pageNumber})\r\n      .then(res => setUserState(res.data))\r\n      .catch(() => sweetAlertError())\r\n      .finally(() => setUserLoading(false))\r\n\r\n  }, [valueSearch, valueZone, pageNumber])\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllRegionsActions())\r\n  },[dispatch])\r\n\r\n  // const userState = useSelector((state) => state?.users?.users)\r\n\r\n  const regionsSelector = useSelector((state) => state?.regions?.regions)\r\n  const provincesSelector = useSelector((state) => state?.provinces?.provinces)\r\n  const municipalitiesSelector = useSelector((state) => state?.municipalities?.municipalities)\r\n\r\n  const defaultValueState = {value: '', label: 'Sin Seleccionar'}\r\n  const [regionState, setRegionState] = useState(defaultValueState)\r\n  const [provinciaState, setProvinciaState] = useState(defaultValueState)\r\n  const [municipioState, setMunicipioState] = useState(defaultValueState)\r\n\r\n  const handleChangeRegions = (e) => {\r\n    if(e.value) {\r\n      setRegionState(e)\r\n      setValueZone(e.value)\r\n      setProvinciaState(defaultValueState)\r\n      setMunicipioState(defaultValueState)\r\n      // filterTickets(value, 2)\r\n    } else {\r\n      setRegionState(defaultValueState)\r\n      setProvinciaState(defaultValueState)\r\n      setMunicipioState(defaultValueState)\r\n      setValueZone(\"\")\r\n      // setDataTable(dataTableTickets)\r\n    }\r\n\r\n    dispatch(getProvincesByRegionActions(e.value))\r\n  }\r\n\r\n  const handleChangeProvinces = (e) => {\r\n    if (e.value) {\r\n      setProvinciaState(e)\r\n      setValueZone(regionState.value + e.value)\r\n      // filterTickets(regionState.value + value, 4)\r\n    } else {\r\n      setProvinciaState(defaultValueState)\r\n      setMunicipioState(defaultValueState)\r\n      setValueZone(regionState.value)\r\n      // filterTickets(regionState.value, 2)\r\n    }\r\n\r\n    dispatch(getMunicipalitiesByprovincesByRegionsActions(regionState.value, e.value),)\r\n  }\r\n\r\n  const handleChangeMunicipalities = (e) => {\r\n    if (e.value) {\r\n      setMunicipioState(e)\r\n      setValueZone(regionState.value + provinciaState.value + e.value)\r\n      // filterTickets(regionState.value + provinciaState.value + value, 6)\r\n    } else {\r\n      setMunicipioState(defaultValueState)\r\n      setValueZone(regionState.value + provinciaState.value)\r\n      // filterTickets(regionState.value + provinciaState.value, 4)\r\n    }\r\n  }\r\n\r\n  // const handleChangeRols = ({ value, label }) => {\r\n  //   if (value) {\r\n  //     setRolState({ value, label })\r\n  //     filterRols(value)\r\n  //   } else {\r\n  //     setRolState(defaultValueState)\r\n  //     setDataTable(userState)\r\n  //   }\r\n  //   setProvinciaState(defaultValueState)\r\n  //   setMunicipioState(defaultValueState)\r\n  // }\r\n\r\n  // const filterZone = (value, positionToFind = 0) => {\r\n  //   const data = userState.filter((users) => users.zone_code !== null)\r\n  //   const dataValidated = data.filter(\r\n  //     (users) => users.zone_code.substr(2, positionToFind) === value,\r\n  //   )\r\n  //   setDataTable(dataValidated)\r\n  // }\r\n\r\n  // const filterRols = (value) => {\r\n  //   const data = userState.filter((rols) => rols.role_ids[0] === value)\r\n  //   setDataTable(data)\r\n  // }\r\n\r\n  // const searchTable = (data, queryLowered) =>\r\n  //   data.filter(\r\n  //     (data) =>\r\n  //       (data.firstname || '').toLowerCase().includes(queryLowered) ||\r\n  //       (data.lastname || '').toLowerCase().includes(queryLowered) ||\r\n  //       (data.phone || '').toLowerCase().includes(queryLowered) ||\r\n  //       (data.cedula || '').toLowerCase().includes(queryLowered),\r\n  //   )\r\n\r\n  return (\r\n    <>\r\n      <CardGrid cardHeaderTitle=\"Búsqueda con filtro\">\r\n        <Row>\r\n        <Col md=\"4\">\r\n            <Label>Región</Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              value={regionState}\r\n              isLoading={!regionsSelector[0]}\r\n              options={optionsCodeValueSelectNoData(regionsSelector)}\r\n              onChange={(e) => handleChangeRegions(e)}\r\n              noOptionsMessage={({ inputValue }) =>\r\n                noOptionsMessageSelect(\r\n                  inputValue,\r\n                  territoriesLabel.selectNoRegionsFound,\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <Label>Provincia</Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              value={provinciaState}\r\n              isLoading={!provincesSelector[0]}\r\n              options={optionsCodeValueSelectNoData(provincesSelector)}\r\n              onChange={(e) => handleChangeProvinces(e)}\r\n              noOptionsMessage={({ inputValue }) =>\r\n                noOptionsMessageSelect(\r\n                  inputValue,\r\n                  territoriesLabel.selectNoProvincesFound,\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <Label>Municipio</Label>\r\n            <Select\r\n              isClearable={false}\r\n              theme={selectThemeColors}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              value={municipioState}\r\n              isLoading={!municipalitiesSelector[0]}\r\n              options={optionsCodeValueSelectNoData(municipalitiesSelector)}\r\n              onChange={(e) => handleChangeMunicipalities(e)}\r\n              noOptionsMessage={({ inputValue }) =>\r\n                noOptionsMessageSelect(\r\n                  inputValue,\r\n                  territoriesLabel.selectNoMunicipalitiesFound,\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </CardGrid>\r\n\r\n      <DataTableList\r\n        columnsTable={columns}\r\n        setValueSearch={setValueSearch}\r\n        setPageNumber={setPageNumber}\r\n        dataTable={userState}\r\n        showButtonAddUser\r\n        loadingTable={userLoading}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n","export const zammadApi = {\r\n  tickets: 'tickets',\r\n  ticketById: (id) => `tickets/${id}?expand=true`,\r\n  allTickets: 'ticket_overviews?view=all',\r\n  ticketsByDate: 'tickets/search?query=created_at:',\r\n  ticketsByState: 'tickets/search?query=state_id:',\r\n  ticketsByGroup: 'tickets/search?query=group_id:',\r\n\r\n  ticketPriorities: 'ticket_priorities',\r\n  \r\n  ticketStates: 'ticket_states',\r\n  \r\n  postTags: 'tag_list',\r\n  tagsByName: (name) => `tag_search?term=${name}`,\r\n  \r\n  postTicketTags: 'tags/add',\r\n  ticketTags: (id) => `tags?object=Ticket&o_id=${id}`,\r\n\r\n  ticketArticles: 'ticket_articles/by_ticket/',\r\n  postTicketArticles: 'ticket_articles',\r\n  ticketArticlesAttachment: 'ticket_attachment/',\r\n\r\n  users: 'users',\r\n  userMe: 'users/me?expand=true',\r\n  userById: (id) => `users/${id}?expand=true`,\r\n  userByCedula: 'users/search?query=cedula:',\r\n  allUsers: 'users?expand=true',\r\n\r\n  allRols: 'roles',\r\n\r\n  organizations: 'organizations',\r\n  organizationsByAcronym: (acronym) => `organizations/search?query=acronimo:${acronym}`,\r\n\r\n  groups: 'groups',\r\n}\r\n","export const territoriesApi = {\r\n  regions: 'regions',\r\n  provinces: 'provinces',\r\n  municipalities: 'municipalities',\r\n\r\n  regionByIdentifier: (id) => `regions?identifier=${id}`,\r\n  provinceByIdentifier: (id) => `provinces?identifier=${id}`,\r\n  municipalityByIdentifier: (id) => `municipalities?identifier=${id}`,\r\n  districtByIdentifier: (id) => `districts?identifier=${id}`,\r\n  sectionByIdentifier: (id) => `sections?identifier=${id}`,\r\n  neighborhoodByIdentifier: (id) => `neighborhoods?identifier=${id}`,\r\n  subNeighborhoodByIdentifier: (id) => `sub-neighborhoods?identifier=${id}`,\r\n\r\n  provincesByRegion: (id) => `regions/${id}/provinces`,\r\n\r\n  municipalitiesByprovincesByRegions: (idRegions, idProvinces) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities`,\r\n\r\n  districtByIdProvinceByIdMunicipality: (idRegions, idProvinces, idMunicipality) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts`,\r\n\r\n  sectionByIdMunicipalityByIdDistrict: (idRegions, idProvinces, idMunicipality, idDistrict) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts/${idDistrict}/sections`,\r\n\r\n  neighborhoodByIdDistrictByIdSection: (idRegions, idProvinces, idMunicipality, idDistrict, idSection) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts/${idDistrict}/sections/${idSection}/neighborhoods`,\r\n\r\n  subNeighborhoodByIdSectionByIdNeighborhood: (idRegions, idProvinces, idMunicipality, idDistrict, idSection, idNeighborhood) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts/${idDistrict}/sections/${idSection}/neighborhoods/${idNeighborhood}/sub-neighborhoods`,\r\n\r\n}\r\n","import { Card, CardHeader, CardTitle, CardBody } from 'reactstrap'\r\n\r\nconst CardGrid = ({cardHeaderTitle, cardHeaderComponent, children}) => {\r\n\r\n    return (\r\n        <Card>\r\n            {cardHeaderTitle || cardHeaderComponent ? <>\r\n                <CardHeader>\r\n                    {cardHeaderTitle &&\r\n                        <CardTitle tag='h4'>{cardHeaderTitle}</CardTitle>\r\n                    }\r\n                    {cardHeaderComponent &&\r\n                        cardHeaderComponent()\r\n                    }\r\n                </CardHeader> \r\n                </> : null\r\n            }\r\n\r\n            <CardBody>\r\n                {children}\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CardGrid","import { zammadAxios } from '../../../configs/axios'\r\nimport { zammadApi } from '../../../constants/api/zammadApi'\r\n\r\nexport const postUser = async (dataObj) => await zammadAxios.post(zammadApi.users, dataObj)\r\n\r\nexport const putUser = async (dataObj) => await zammadAxios.put(`${zammadApi.users}/${dataObj.id}`, dataObj)\r\n\r\nexport const getUserMe = async () => await zammadAxios.get(zammadApi.userMe)\r\n\r\nexport const getUserById = async (id) => await zammadAxios.get(zammadApi.userById(id))\r\n\r\nexport const getUserByCedula = async (id) => await zammadAxios.get(`${zammadApi.userByCedula}${id}`)\r\n\r\nexport const getAllUsers = async () => await zammadAxios.get(zammadApi.allUsers)\r\n","import { strapiAxios } from '../../../configs/axios'\r\nimport { strapiApi } from '../../../constants/api/strapiApi'\r\n\r\nexport const strapiGetUserMe = async () => await strapiAxios.get(strapiApi.users.userMe)\r\n\r\nexport const strapiGetUsers = async ({valueSearch, valueZone, pageNumber}) => await strapiAxios.get(strapiApi.users.user({valueSearch, valueZone, pageNumber}))\r\n\r\nexport const strapiGetUserById = async (id) => await strapiAxios.get(strapiApi.users.userId(id))\r\n\r\nexport const strapiPutUser = async (id, data) => await strapiAxios.put(`${strapiApi.users.userPost}/${id}`, data)\r\n\r\nexport const strapiPostUsers = async (data) => await strapiAxios.post(strapiApi.users.userPost, data)\r\n\r\nexport const strapiImportUsers = async (data) => await strapiAxios.post(strapiApi.users.userImport, data)\r\n","import { territoriesAxios } from '../../../../configs/axios'\r\nimport { territoriesApi } from '../../../../constants/api/territoriesApi'\r\nimport { territoriesTypes } from '../../../types/territories'\r\n\r\nexport const getAllRegionsActions = () => (dispatch) =>\r\n  territoriesAxios.get(territoriesApi.regions).then((response) => {\r\n    dispatch({\r\n      type: territoriesTypes.GET_REGIONS,\r\n      payload: response.data.data,\r\n    })\r\n  })\r\n","import { zammadAxios } from '../../../../configs/axios'\r\nimport { zammadApi } from '../../../../constants/api/zammadApi'\r\nimport { zammadTypes } from '../../../types/zammad'\r\n\r\nexport const getAllUsersActions = () => (dispatch) =>\r\n  zammadAxios.get(zammadApi.allUsers).then((response) => {\r\n    dispatch({\r\n      type: zammadTypes.GET_USERS,\r\n      payload: response.data,\r\n    })\r\n  })\r\n\r\nexport const getUserMeActions = () => (dispatch) =>\r\n  zammadAxios.get(zammadApi.userMe).then((response) => {\r\n    dispatch({\r\n      type: zammadTypes.GET_USER_ME,\r\n      payload: response.data,\r\n    })\r\n  })\r\n","import { territoriesAxios } from '../../../../configs/axios'\r\nimport { territoriesApi } from '../../../../constants/api/territoriesApi'\r\nimport { territoriesTypes } from '../../../types/territories'\r\n\r\nexport const getAllMunicipalitiesActions = () => (dispatch) =>\r\n  territoriesAxios.get(territoriesApi.municipalities).then((response) => {\r\n    dispatch({\r\n      type: territoriesTypes.GET_MUNICIPALITIES,\r\n      payload: response.data.data,\r\n    })\r\n  })\r\n\r\nexport const getMunicipalitiesByprovincesByRegionsActions =\r\n  (idRegions = null, idProvinces = null) =>\r\n  (dispatch) => {\r\n    if (idRegions && idProvinces) {\r\n      return territoriesAxios\r\n        .get(\r\n          territoriesApi.municipalitiesByprovincesByRegions(\r\n            idRegions,\r\n            idProvinces,\r\n          ),\r\n        )\r\n        .then((response) => {\r\n          dispatch({\r\n            type: territoriesTypes.GET_MUNICIPALITIES_BY_PROVINCES_BY_REGIONS,\r\n            payload: response.data.data,\r\n          })\r\n        })\r\n    }\r\n\r\n    return dispatch(cleanSelectMunicipalities())\r\n  }\r\n\r\nexport const cleanSelectMunicipalities = () => ({\r\n  type: territoriesTypes.CLEAN_SELECT_MUNICIPALITIES,\r\n})\r\n","import { zammadAxios } from '../../../../configs/axios'\r\nimport { zammadApi } from '../../../../constants/api/zammadApi'\r\nimport { zammadTypes } from '../../../types/zammad'\r\n\r\nexport const getAllRolsActions = () => (dispatch) =>\r\n  zammadAxios.get(zammadApi.allRols).then((response) => {\r\n    dispatch({\r\n      type: zammadTypes.GET_ROLS,\r\n      payload: response.data,\r\n    })\r\n  })\r\n","import { territoriesAxios } from '../../../../configs/axios'\r\nimport { territoriesApi } from '../../../../constants/api/territoriesApi'\r\nimport { territoriesTypes } from '../../../types/territories'\r\nimport { cleanSelectMunicipalities } from '../municipalities'\r\n\r\nexport const getAllProvincesActions = () => (dispatch) =>\r\n  territoriesAxios.get(territoriesApi.provinces).then((response) => {\r\n    dispatch({\r\n      type: territoriesTypes.GET_PROVINCES,\r\n      payload: response.data.data,\r\n    })\r\n  })\r\n\r\nexport const getProvincesByRegionActions =\r\n  (id = null) =>\r\n  (dispatch) => {\r\n    if (id) {\r\n      return territoriesAxios\r\n        .get(territoriesApi.provincesByRegion(id))\r\n        .then((response) => {\r\n          dispatch({\r\n            type: territoriesTypes.GET_PROVINCES_BY_REGION,\r\n            payload: response.data.data,\r\n          })\r\n        })\r\n    }\r\n\r\n    return (\r\n      dispatch(cleanSelectProvinces()), dispatch(cleanSelectMunicipalities())\r\n    )\r\n  }\r\n\r\nexport const cleanSelectProvinces = () => ({\r\n  type: territoriesTypes.CLEAN_SELECT_PROVINCES,\r\n})\r\n","import { strapiAxios } from '../../../configs/axios'\r\nimport { strapiApi } from '../../../constants/api/strapiApi'\r\n\r\nexport const strapiGetBeneficiaries = async ({valueSearch, pageNumber}) => await strapiAxios.get(strapiApi.beneficiaries.beneficiary({valueSearch, pageNumber}))\r\n\r\nexport const strapiPostBeneficiary = async (data) => await strapiAxios.post(strapiApi.beneficiaries.beneficiaryPost, data)\r\n\r\nexport const strapiPutBeneficiary = async (id, data) => await strapiAxios.put(strapiApi.beneficiaries.beneficiaryId(id), data)\r\n\r\nexport const strapiGetBeneficiariesByCedula = async (id) => await strapiAxios.get(strapiApi.beneficiaries.beneficiaryByCedula(id))\r\n"],"sourceRoot":""}