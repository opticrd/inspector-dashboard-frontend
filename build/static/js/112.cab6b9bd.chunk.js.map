{"version":3,"sources":["views/apps/bandeja/beneficiaries/columns.js","views/apps/bandeja/beneficiaries/index.js","constants/api/zammadApi.js","constants/api/territoriesApi.js","@core/components/card-grid/index.js","services/zammad/user/index.js","services/strapi/users/index.js","redux/actions/zammad/users/index.js","redux/actions/territories/municipalities/index.js","redux/actions/zammad/rols/index.js","redux/actions/territories/provinces/index.js","services/strapi/beneficiaries/index.js"],"names":["columns","name","minWidth","selector","sortable","cell","row","userInfo","id","firstName","attributes","lastName","lastname","cedula","rowClient","email","phone","UsersList","dispatch","useDispatch","useState","userState","setUserState","console","log","userLoading","setUserLoading","valueSearch","setValueSearch","pageNumber","setPageNumber","useEffect","strapiGetBeneficiaries","then","res","data","catch","sweetAlertError","finally","columnsTable","dataTable","loadingTable","zammadApi","tickets","ticketById","allTickets","ticketsByDate","ticketsByState","ticketsByGroup","ticketPriorities","ticketStates","postTags","tagsByName","postTicketTags","ticketTags","ticketArticles","postTicketArticles","ticketArticlesAttachment","users","userMe","userById","userByCedula","allUsers","allRols","organizations","organizationsByAcronym","acronym","groups","territoriesApi","regions","provinces","municipalities","regionByIdentifier","provinceByIdentifier","municipalityByIdentifier","districtByIdentifier","sectionByIdentifier","neighborhoodByIdentifier","subNeighborhoodByIdentifier","provincesByRegion","municipalitiesByprovincesByRegions","idRegions","idProvinces","districtByIdProvinceByIdMunicipality","idMunicipality","sectionByIdMunicipalityByIdDistrict","idDistrict","neighborhoodByIdDistrictByIdSection","idSection","subNeighborhoodByIdSectionByIdNeighborhood","idNeighborhood","CardGrid","cardHeaderTitle","cardHeaderComponent","children","tag","postUser","dataObj","a","zammadAxios","post","putUser","put","getUserMe","get","getUserByCedula","strapiGetUserMe","strapiAxios","strapiApi","strapiGetUsers","valueZone","user","strapiGetUserById","userId","strapiPutUser","userPost","strapiPostUsers","strapiImportUsers","userImport","getMunicipalitiesByprovincesByRegionsActions","territoriesAxios","response","type","territoriesTypes","GET_MUNICIPALITIES_BY_PROVINCES_BY_REGIONS","payload","cleanSelectMunicipalities","CLEAN_SELECT_MUNICIPALITIES","getProvincesByRegionActions","GET_PROVINCES_BY_REGION","cleanSelectProvinces","CLEAN_SELECT_PROVINCES","beneficiaries","beneficiary","strapiPostBeneficiary","beneficiaryPost","strapiPutBeneficiary","beneficiaryId","strapiGetBeneficiariesByCedula","beneficiaryByCedula"],"mappings":"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","file":"static/js/112.cab6b9bd.chunk.js","sourcesContent":["import {\r\n  rowClient,\r\n  rowActions,\r\n} from '../../../../@core/components/table/commonColumns'\r\nimport Url from '../../../../constants/Url'\r\n\r\nexport const columns = [\r\n  {\r\n    name: 'Nombre',\r\n    minWidth: '400px',\r\n    selector: 'name',\r\n    sortable: true,\r\n    cell: (row) => {\r\n      const userInfo = {\r\n        id: row.id,\r\n        firstName: row.attributes.name,\r\n        lastName: row.attributes.lastname,\r\n        cedula: row.attributes.cedula,\r\n      }\r\n\r\n      return rowClient(userInfo)\r\n    },\r\n  },\r\n  {\r\n    name: 'Correo',\r\n    minWidth: '160px',\r\n    selector: 'email',\r\n    sortable: true,\r\n    cell: (row) => row.attributes.email,\r\n  },\r\n  {\r\n    name: 'TelÃ©fono',\r\n    minWidth: '160px',\r\n    selector: 'phone',\r\n    sortable: true,\r\n    cell: (row) => row.attributes.phone,\r\n  },\r\n]\r\n","// ** React Imports\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n// ** Columns\r\n\r\n// ** Third Party Components\r\nimport Select from 'react-select'\r\nimport { selectThemeColors } from '@utils'\r\nimport { Row, Col, Label } from 'reactstrap'\r\nimport { columns } from './columns'\r\n\r\n// import DataTableList from '../../../../@core/components/table'\r\nimport DataTableList from \"../list/table\"\r\nimport CardGrid from '../../../../@core/components/card-grid'\r\nimport ComponentSpinner from '../../../../@core/components/spinner/Loading-spinner'\r\nimport { getAllUsersActions } from '../../../../redux/actions/zammad/users'\r\nimport { getAllRolsActions } from '../../../../redux/actions/zammad/rols'\r\nimport { getAllProvincesActions } from '../../../../redux/actions/territories/provinces'\r\nimport { getAllMunicipalitiesActions } from '../../../../redux/actions/territories/municipalities'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\r\nimport {\r\n  optionsIdValueSelectNoData,\r\n  optionsCodeValueSelectNoData,\r\n} from '../../../../utility/Utils'\r\nimport { getAllUsers } from '../../../../services/zammad/user'\r\nimport { sweetAlertError } from '../../../../@core/components/sweetAlert'\r\nimport { strapiGetBeneficiaries } from '../../../../services/strapi/beneficiaries'\r\nimport { strapiGetUsers } from '../../../../services/strapi/users'\r\n\r\nconst UsersList = function() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [ userState, setUserState ] = useState([])\r\n  console.log(userState)\r\n  const [ userLoading, setUserLoading ] = useState(true)\r\n  const [valueSearch, setValueSearch] = useState(\"\")\r\n  const [ pageNumber, setPageNumber ] = useState(1)\r\n\r\n  useEffect(() => {\r\n    // dispatch(getAllUsersActions())\r\n    // getAllUsers()\r\n    //   .then(res => setUserState(res.data))\r\n    //   .catch(err => {\r\n    //     sweetAlertError()\r\n    //   })\r\n    //   .finally(() => setUserLoading(false))\r\n\r\n    /* more later */\r\n    // dispatch(getAllRolsActions())\r\n    // dispatch(getAllProvincesActions())\r\n    // dispatch(getAllMunicipalitiesActions())\r\n\r\n    strapiGetBeneficiaries({valueSearch, pageNumber})\r\n      .then(res => setUserState(res.data))\r\n      .catch(() => sweetAlertError())\r\n      .finally(() => setUserLoading(false))\r\n\r\n  }, [dispatch, valueSearch, pageNumber])\r\n\r\n  // const userState = useSelector((state) => state?.users?.users)\r\n\r\n  // const provincesSelector = useSelector(\r\n  //   (state) => state?.provinces?.allProvinces,\r\n  // )\r\n  // const municipalitiesSelector = useSelector(\r\n  //   (state) => state?.municipalities?.allMunicipalities,\r\n  // )\r\n  // const rolSelector = useSelector((state) => state?.rols?.rols)\r\n\r\n  // const defaultValueState = {value: '', label: 'Sin Seleccionar'}\r\n\r\n  // const [provinciaState, setProvinciaState] = useState(defaultValueState)\r\n  // const [municipioState, setMunicipioState] = useState(defaultValueState)\r\n  // const [rolState, setRolState] = useState(defaultValueState)\r\n\r\n  // const [dataTable, setDataTable] = useState([])\r\n\r\n  // useEffect(() => {\r\n  //   setDataTable(userState)\r\n  // }, [userState])\r\n\r\n  // const handleChangeProvinces = ({ value, label }) => {\r\n  //   if (value) {\r\n  //     setProvinciaState({ value, label })\r\n  //     setMunicipioState(defaultValueState)\r\n  //     filterZone(value, 2)\r\n  //   } else {\r\n  //     setProvinciaState(defaultValueState)\r\n  //     setMunicipioState(defaultValueState)\r\n  //     setDataTable(userState)\r\n  //   }\r\n  //   setRolState(defaultValueState)\r\n  // }\r\n\r\n  // const handleChangeMunicipalities = ({ value, label }) => {\r\n  //   if (value) {\r\n  //     setMunicipioState({ value, label })\r\n  //     filterZone(provinciaState.value + value, 4)\r\n  //   } else {\r\n  //     setMunicipioState(defaultValueState)\r\n  //     filterZone(provinciaState.value, 2)\r\n  //   }\r\n  //   setRolState(defaultValueState)\r\n  // }\r\n\r\n  // const handleChangeRols = ({ value, label }) => {\r\n  //   if (value) {\r\n  //     setRolState({ value, label })\r\n  //     filterRols(value)\r\n  //   } else {\r\n  //     setRolState(defaultValueState)\r\n  //     setDataTable(userState)\r\n  //   }\r\n  //   setProvinciaState(defaultValueState)\r\n  //   setMunicipioState(defaultValueState)\r\n  // }\r\n\r\n  // const filterZone = (value, positionToFind = 0) => {\r\n  //   const data = userState.filter((users) => users.zone !== null)\r\n  //   const dataValidated = data.filter(\r\n  //     (users) => users.zone.substr(2, positionToFind) === value,\r\n  //   )\r\n  //   setDataTable(dataValidated)\r\n  // }\r\n\r\n  // const filterRols = (value) => {\r\n  //   const data = userState.filter((rols) => rols.role_ids[0] === value)\r\n  //   setDataTable(data)\r\n  // }\r\n\r\n  // const searchTable = (data, queryLowered) =>\r\n  //   data.filter(\r\n  //     (data) =>\r\n  //       (data.firstname || '').toLowerCase().includes(queryLowered) ||\r\n  //       (data.lastname || '').toLowerCase().includes(queryLowered) ||\r\n  //       (data.phone || '').toLowerCase().includes(queryLowered) ||\r\n  //       (data.cedula || '').toLowerCase().includes(queryLowered),\r\n  //   )\r\n\r\n  return (\r\n    <>\r\n      {/* <CardGrid cardHeaderTitle=\"BÃºsqueda con filtro\">\r\n        <Row>\r\n          <Col className=\"my-md-0 my-1\" md=\"4\">\r\n            <Label>Provincia</Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              value={provinciaState}\r\n              isLoading={!provincesSelector[0]}\r\n              options={optionsCodeValueSelectNoData(provincesSelector)}\r\n              onChange={handleChangeProvinces}\r\n            />\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <Label>Municipio</Label>\r\n            <Select\r\n              theme={selectThemeColors}\r\n              isClearable={false}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              value={municipioState}\r\n              isLoading={!municipalitiesSelector[0]}\r\n              options={optionsCodeValueSelectNoData(\r\n                municipalitiesSelector.filter(\r\n                  (municipality) =>\r\n                    municipality.provinceCode === provinciaState.value,\r\n                ),\r\n              )}\r\n              onChange={handleChangeMunicipalities}\r\n            />\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <Label>Permiso</Label>\r\n            <Select\r\n              isClearable={false}\r\n              theme={selectThemeColors}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n              value={rolState}\r\n              isLoading={!rolSelector[0]}\r\n              options={optionsIdValueSelectNoData(rolSelector)}\r\n              onChange={handleChangeRols}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </CardGrid> */}\r\n\r\n      <DataTableList\r\n        columnsTable={columns}\r\n        setValueSearch={setValueSearch}\r\n        setPageNumber={setPageNumber}\r\n        dataTable={userState}\r\n        loadingTable={userLoading}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n","export const zammadApi = {\r\n  tickets: 'tickets',\r\n  ticketById: (id) => `tickets/${id}?expand=true`,\r\n  allTickets: 'ticket_overviews?view=all',\r\n  ticketsByDate: 'tickets/search?query=created_at:',\r\n  ticketsByState: 'tickets/search?query=state_id:',\r\n  ticketsByGroup: 'tickets/search?query=group_id:',\r\n\r\n  ticketPriorities: 'ticket_priorities',\r\n  \r\n  ticketStates: 'ticket_states',\r\n  \r\n  postTags: 'tag_list',\r\n  tagsByName: (name) => `tag_search?term=${name}`,\r\n  \r\n  postTicketTags: 'tags/add',\r\n  ticketTags: (id) => `tags?object=Ticket&o_id=${id}`,\r\n\r\n  ticketArticles: 'ticket_articles/by_ticket/',\r\n  postTicketArticles: 'ticket_articles',\r\n  ticketArticlesAttachment: 'ticket_attachment/',\r\n\r\n  users: 'users',\r\n  userMe: 'users/me?expand=true',\r\n  userById: (id) => `users/${id}?expand=true`,\r\n  userByCedula: 'users/search?query=cedula:',\r\n  allUsers: 'users?expand=true',\r\n\r\n  allRols: 'roles',\r\n\r\n  organizations: 'organizations',\r\n  organizationsByAcronym: (acronym) => `organizations/search?query=acronimo:${acronym}`,\r\n\r\n  groups: 'groups',\r\n}\r\n","export const territoriesApi = {\r\n  regions: 'regions',\r\n  provinces: 'provinces',\r\n  municipalities: 'municipalities',\r\n\r\n  regionByIdentifier: (id) => `regions?identifier=${id}`,\r\n  provinceByIdentifier: (id) => `provinces?identifier=${id}`,\r\n  municipalityByIdentifier: (id) => `municipalities?identifier=${id}`,\r\n  districtByIdentifier: (id) => `districts?identifier=${id}`,\r\n  sectionByIdentifier: (id) => `sections?identifier=${id}`,\r\n  neighborhoodByIdentifier: (id) => `neighborhoods?identifier=${id}`,\r\n  subNeighborhoodByIdentifier: (id) => `sub-neighborhoods?identifier=${id}`,\r\n\r\n  provincesByRegion: (id) => `regions/${id}/provinces`,\r\n\r\n  municipalitiesByprovincesByRegions: (idRegions, idProvinces) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities`,\r\n\r\n  districtByIdProvinceByIdMunicipality: (idRegions, idProvinces, idMunicipality) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts`,\r\n\r\n  sectionByIdMunicipalityByIdDistrict: (idRegions, idProvinces, idMunicipality, idDistrict) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts/${idDistrict}/sections`,\r\n\r\n  neighborhoodByIdDistrictByIdSection: (idRegions, idProvinces, idMunicipality, idDistrict, idSection) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts/${idDistrict}/sections/${idSection}/neighborhoods`,\r\n\r\n  subNeighborhoodByIdSectionByIdNeighborhood: (idRegions, idProvinces, idMunicipality, idDistrict, idSection, idNeighborhood) =>\r\n    `regions/${idRegions}/provinces/${idProvinces}/municipalities/${idMunicipality}/districts/${idDistrict}/sections/${idSection}/neighborhoods/${idNeighborhood}/sub-neighborhoods`,\r\n\r\n}\r\n","import { Card, CardHeader, CardTitle, CardBody } from 'reactstrap'\r\n\r\nconst CardGrid = ({cardHeaderTitle, cardHeaderComponent, children}) => {\r\n\r\n    return (\r\n        <Card>\r\n            {cardHeaderTitle || cardHeaderComponent ? <>\r\n                <CardHeader>\r\n                    {cardHeaderTitle &&\r\n                        <CardTitle tag='h4'>{cardHeaderTitle}</CardTitle>\r\n                    }\r\n                    {cardHeaderComponent &&\r\n                        cardHeaderComponent()\r\n                    }\r\n                </CardHeader> \r\n                </> : null\r\n            }\r\n\r\n            <CardBody>\r\n                {children}\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CardGrid","import { zammadAxios } from '../../../configs/axios'\r\nimport { zammadApi } from '../../../constants/api/zammadApi'\r\n\r\nexport const postUser = async (dataObj) => await zammadAxios.post(zammadApi.users, dataObj)\r\n\r\nexport const putUser = async (dataObj) => await zammadAxios.put(`${zammadApi.users}/${dataObj.id}`, dataObj)\r\n\r\nexport const getUserMe = async () => await zammadAxios.get(zammadApi.userMe)\r\n\r\nexport const getUserById = async (id) => await zammadAxios.get(zammadApi.userById(id))\r\n\r\nexport const getUserByCedula = async (id) => await zammadAxios.get(`${zammadApi.userByCedula}${id}`)\r\n\r\nexport const getAllUsers = async () => await zammadAxios.get(zammadApi.allUsers)\r\n","import { strapiAxios } from '../../../configs/axios'\r\nimport { strapiApi } from '../../../constants/api/strapiApi'\r\n\r\nexport const strapiGetUserMe = async () => await strapiAxios.get(strapiApi.users.userMe)\r\n\r\nexport const strapiGetUsers = async ({valueSearch, valueZone, pageNumber}) => await strapiAxios.get(strapiApi.users.user({valueSearch, valueZone, pageNumber}))\r\n\r\nexport const strapiGetUserById = async (id) => await strapiAxios.get(strapiApi.users.userId(id))\r\n\r\nexport const strapiPutUser = async (id, data) => await strapiAxios.put(`${strapiApi.users.userPost}/${id}`, data)\r\n\r\nexport const strapiPostUsers = async (data) => await strapiAxios.post(strapiApi.users.userPost, data)\r\n\r\nexport const strapiImportUsers = async (data) => await strapiAxios.post(strapiApi.users.userImport, data)\r\n","import { zammadAxios } from '../../../../configs/axios'\r\nimport { zammadApi } from '../../../../constants/api/zammadApi'\r\nimport { zammadTypes } from '../../../types/zammad'\r\n\r\nexport const getAllUsersActions = () => (dispatch) =>\r\n  zammadAxios.get(zammadApi.allUsers).then((response) => {\r\n    dispatch({\r\n      type: zammadTypes.GET_USERS,\r\n      payload: response.data,\r\n    })\r\n  })\r\n\r\nexport const getUserMeActions = () => (dispatch) =>\r\n  zammadAxios.get(zammadApi.userMe).then((response) => {\r\n    dispatch({\r\n      type: zammadTypes.GET_USER_ME,\r\n      payload: response.data,\r\n    })\r\n  })\r\n","import { territoriesAxios } from '../../../../configs/axios'\r\nimport { territoriesApi } from '../../../../constants/api/territoriesApi'\r\nimport { territoriesTypes } from '../../../types/territories'\r\n\r\nexport const getAllMunicipalitiesActions = () => (dispatch) =>\r\n  territoriesAxios.get(territoriesApi.municipalities).then((response) => {\r\n    dispatch({\r\n      type: territoriesTypes.GET_MUNICIPALITIES,\r\n      payload: response.data.data,\r\n    })\r\n  })\r\n\r\nexport const getMunicipalitiesByprovincesByRegionsActions =\r\n  (idRegions = null, idProvinces = null) =>\r\n  (dispatch) => {\r\n    if (idRegions && idProvinces) {\r\n      return territoriesAxios\r\n        .get(\r\n          territoriesApi.municipalitiesByprovincesByRegions(\r\n            idRegions,\r\n            idProvinces,\r\n          ),\r\n        )\r\n        .then((response) => {\r\n          dispatch({\r\n            type: territoriesTypes.GET_MUNICIPALITIES_BY_PROVINCES_BY_REGIONS,\r\n            payload: response.data.data,\r\n          })\r\n        })\r\n    }\r\n\r\n    return dispatch(cleanSelectMunicipalities())\r\n  }\r\n\r\nexport const cleanSelectMunicipalities = () => ({\r\n  type: territoriesTypes.CLEAN_SELECT_MUNICIPALITIES,\r\n})\r\n","import { zammadAxios } from '../../../../configs/axios'\r\nimport { zammadApi } from '../../../../constants/api/zammadApi'\r\nimport { zammadTypes } from '../../../types/zammad'\r\n\r\nexport const getAllRolsActions = () => (dispatch) =>\r\n  zammadAxios.get(zammadApi.allRols).then((response) => {\r\n    dispatch({\r\n      type: zammadTypes.GET_ROLS,\r\n      payload: response.data,\r\n    })\r\n  })\r\n","import { territoriesAxios } from '../../../../configs/axios'\r\nimport { territoriesApi } from '../../../../constants/api/territoriesApi'\r\nimport { territoriesTypes } from '../../../types/territories'\r\nimport { cleanSelectMunicipalities } from '../municipalities'\r\n\r\nexport const getAllProvincesActions = () => (dispatch) =>\r\n  territoriesAxios.get(territoriesApi.provinces).then((response) => {\r\n    dispatch({\r\n      type: territoriesTypes.GET_PROVINCES,\r\n      payload: response.data.data,\r\n    })\r\n  })\r\n\r\nexport const getProvincesByRegionActions =\r\n  (id = null) =>\r\n  (dispatch) => {\r\n    if (id) {\r\n      return territoriesAxios\r\n        .get(territoriesApi.provincesByRegion(id))\r\n        .then((response) => {\r\n          dispatch({\r\n            type: territoriesTypes.GET_PROVINCES_BY_REGION,\r\n            payload: response.data.data,\r\n          })\r\n        })\r\n    }\r\n\r\n    return (\r\n      dispatch(cleanSelectProvinces()), dispatch(cleanSelectMunicipalities())\r\n    )\r\n  }\r\n\r\nexport const cleanSelectProvinces = () => ({\r\n  type: territoriesTypes.CLEAN_SELECT_PROVINCES,\r\n})\r\n","import { strapiAxios } from '../../../configs/axios'\r\nimport { strapiApi } from '../../../constants/api/strapiApi'\r\n\r\nexport const strapiGetBeneficiaries = async ({valueSearch, pageNumber}) => await strapiAxios.get(strapiApi.beneficiaries.beneficiary({valueSearch, pageNumber}))\r\n\r\nexport const strapiPostBeneficiary = async (data) => await strapiAxios.post(strapiApi.beneficiaries.beneficiaryPost, data)\r\n\r\nexport const strapiPutBeneficiary = async (id, data) => await strapiAxios.put(strapiApi.beneficiaries.beneficiaryId(id), data)\r\n\r\nexport const strapiGetBeneficiariesByCedula = async (id) => await strapiAxios.get(strapiApi.beneficiaries.beneficiaryByCedula(id))\r\n"],"sourceRoot":""}